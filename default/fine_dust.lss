
fine_dust.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000940  000009d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800106  00800106  000009da  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001fa  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000748  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f3  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bd9  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000252  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000361  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002acb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include "fine_dust.h"

int main() {
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	int i;
	unsigned int result;
	unsigned char ch;

	ada_fruit_init();
  b2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ada_fruit_init>
	uart_init();
  b6:	0e 94 19 04 	call	0x832	; 0x832 <uart_init>

	ada_fruit_write_command(0x5c);
  ba:	8c e5       	ldi	r24, 0x5C	; 92
  bc:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
  c0:	c0 e0       	ldi	r28, 0x00	; 0
  c2:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < 128 * 128; i++) {
		ada_fruit_write_data(0xff);
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
		ada_fruit_write_data(0xff);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>

	ada_fruit_init();
	uart_init();

	ada_fruit_write_command(0x5c);
	for(i = 0; i < 128 * 128; i++) {
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	c0 30       	cpi	r28, 0x00	; 0
  d6:	d8 07       	cpc	r29, r24
  d8:	a9 f7       	brne	.-22     	; 0xc4 <main+0x1e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	c0 e9       	ldi	r28, 0x90	; 144
  dc:	d1 e0       	ldi	r29, 0x01	; 1
		ada_fruit_write_data(0xff);
		ada_fruit_write_data(0xff);
	}

	while(1) {
		result = (unsigned int)pm2005_get_result();
  de:	0e 94 3b 04 	call	0x876	; 0x876 <pm2005_get_result>
  e2:	7b 01       	movw	r14, r22
  e4:	8c 01       	movw	r16, r24
		three_char_clean_all(0xffff);
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	9f ef       	ldi	r25, 0xFF	; 255
  ea:	0e 94 4e 01 	call	0x29c	; 0x29c <three_char_clean_all>
		three_char_print_dec3(result, 0);
  ee:	c7 01       	movw	r24, r14
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <three_char_print_dec3>
  f8:	80 e3       	ldi	r24, 0x30	; 48
  fa:	95 e7       	ldi	r25, 0x75	; 117
  fc:	fe 01       	movw	r30, r28
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x56>
 106:	eb cf       	rjmp	.-42     	; 0xde <main+0x38>

00000108 <ada_fruit_reset>:
	ada_fruit_write_command(0xaf);
}

void ada_fruit_reset()
{
	PORTB |= (1 << PB0);
 108:	28 9a       	sbi	0x05, 0	; 5
 10a:	88 e8       	ldi	r24, 0x88	; 136
 10c:	93 e1       	ldi	r25, 0x13	; 19
 10e:	20 e9       	ldi	r18, 0x90	; 144
 110:	31 e0       	ldi	r19, 0x01	; 1
 112:	f9 01       	movw	r30, r18
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <ada_fruit_reset+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <ada_fruit_reset+0xa>
	_delay_ms(500);
	PORTB &= ~(1 << PB0);
 11c:	28 98       	cbi	0x05, 0	; 5
 11e:	88 e8       	ldi	r24, 0x88	; 136
 120:	93 e1       	ldi	r25, 0x13	; 19
 122:	20 e9       	ldi	r18, 0x90	; 144
 124:	31 e0       	ldi	r19, 0x01	; 1
 126:	f9 01       	movw	r30, r18
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <ada_fruit_reset+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12e:	d9 f7       	brne	.-10     	; 0x126 <ada_fruit_reset+0x1e>
	_delay_ms(500);
	PORTB |= (1 << PB0);
 130:	28 9a       	sbi	0x05, 0	; 5
 132:	88 e8       	ldi	r24, 0x88	; 136
 134:	93 e1       	ldi	r25, 0x13	; 19
 136:	20 e9       	ldi	r18, 0x90	; 144
 138:	31 e0       	ldi	r19, 0x01	; 1
 13a:	f9 01       	movw	r30, r18
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <ada_fruit_reset+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 142:	d9 f7       	brne	.-10     	; 0x13a <ada_fruit_reset+0x32>
	_delay_ms(500);
}
 144:	08 95       	ret

00000146 <ada_fruit_write_data>:
	spi_write(command);
}

void ada_fruit_write_data(unsigned char data)
{
	PORTB |= (1 << PB1);
 146:	29 9a       	sbi	0x05, 1	; 5
	spi_write(data);
 148:	0e 94 19 01 	call	0x232	; 0x232 <spi_write>
}
 14c:	08 95       	ret

0000014e <ada_fruit_draw_horizental_line>:
	ada_fruit_write_data(127);
	ada_fruit_write_command(0x5c);
}

void ada_fruit_draw_horizental_line(unsigned char length, uint16_t color)
{
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	7b 01       	movw	r14, r22
	for(int i = 0; i < length; i++) {
		ada_fruit_write_data(color >> 8);
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
	ada_fruit_write_command(0x5c);
}

void ada_fruit_draw_horizental_line(unsigned char length, uint16_t color)
{
	for(int i = 0; i < length; i++) {
 160:	08 2f       	mov	r16, r24
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	07 c0       	rjmp	.+14     	; 0x174 <ada_fruit_draw_horizental_line+0x26>
 166:	8f 2d       	mov	r24, r15
 168:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
		ada_fruit_write_data(color >> 8);
		ada_fruit_write_data(color);
 16c:	8e 2d       	mov	r24, r14
 16e:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_command(0x5c);
}

void ada_fruit_draw_horizental_line(unsigned char length, uint16_t color)
{
	for(int i = 0; i < length; i++) {
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	c0 17       	cp	r28, r16
 176:	d1 07       	cpc	r29, r17
 178:	b4 f3       	brlt	.-20     	; 0x166 <ada_fruit_draw_horizental_line+0x18>
		ada_fruit_write_data(color >> 8);
		ada_fruit_write_data(color);
	}
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	ff 90       	pop	r15
 184:	ef 90       	pop	r14
 186:	08 95       	ret

00000188 <ada_fruit_write_command>:
	_delay_ms(500);
}

void ada_fruit_write_command(unsigned char command)
{
	PORTB &= ~(1 << PB1);
 188:	29 98       	cbi	0x05, 1	; 5
	spi_write(command);
 18a:	0e 94 19 01 	call	0x232	; 0x232 <spi_write>
}
 18e:	08 95       	ret

00000190 <ada_fruit_go_to>:
	PORTB |= (1 << PB1);
	spi_write(data);
}

void ada_fruit_go_to(unsigned char x, unsigned char y)
{
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	18 2f       	mov	r17, r24
 196:	06 2f       	mov	r16, r22
	ada_fruit_write_command(0x15);
 198:	85 e1       	ldi	r24, 0x15	; 21
 19a:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
	ada_fruit_write_data(x);
 19e:	81 2f       	mov	r24, r17
 1a0:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_data(127);
 1a4:	8f e7       	ldi	r24, 0x7F	; 127
 1a6:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_command(0x75);
 1aa:	85 e7       	ldi	r24, 0x75	; 117
 1ac:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
	ada_fruit_write_data(y);
 1b0:	80 2f       	mov	r24, r16
 1b2:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_data(127);
 1b6:	8f e7       	ldi	r24, 0x7F	; 127
 1b8:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_command(0x5c);
 1bc:	8c e5       	ldi	r24, 0x5C	; 92
 1be:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
}
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	08 95       	ret

000001c8 <ada_fruit_init>:
#include "ada_fruit.h"
#include "pm2005.h"

void ada_fruit_init()
{
	spi_init();
 1c8:	0e 94 07 01 	call	0x20e	; 0x20e <spi_init>
	DDRB |= (1 << PB0);
 1cc:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1 << PB0);
 1ce:	28 9a       	sbi	0x05, 0	; 5
	DDRB |= (1 << PB1);
 1d0:	21 9a       	sbi	0x04, 1	; 4
	ada_fruit_reset();
 1d2:	0e 94 84 00 	call	0x108	; 0x108 <ada_fruit_reset>
	ada_fruit_write_command(0xfd);
 1d6:	8d ef       	ldi	r24, 0xFD	; 253
 1d8:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
	ada_fruit_write_data(0x12);
 1dc:	82 e1       	ldi	r24, 0x12	; 18
 1de:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_command(0xfd);
 1e2:	8d ef       	ldi	r24, 0xFD	; 253
 1e4:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
	ada_fruit_write_data(0xb1);
 1e8:	81 eb       	ldi	r24, 0xB1	; 177
 1ea:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_command(0xa1);
 1ee:	81 ea       	ldi	r24, 0xA1	; 161
 1f0:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
	ada_fruit_write_data(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_command(0xa2);
 1fa:	82 ea       	ldi	r24, 0xA2	; 162
 1fc:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
	ada_fruit_write_data(0);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 a3 00 	call	0x146	; 0x146 <ada_fruit_write_data>
	ada_fruit_write_command(0xaf);
 206:	8f ea       	ldi	r24, 0xAF	; 175
 208:	0e 94 c4 00 	call	0x188	; 0x188 <ada_fruit_write_command>
}
 20c:	08 95       	ret

0000020e <spi_init>:

#include "my_spi.h"

void spi_init()
{
	DDRB |= (1 << SPI_SS);
 20e:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << SPI_SS);
 210:	2a 9a       	sbi	0x05, 2	; 5
	DDRB |= (1 << SPI_MOSI);
 212:	23 9a       	sbi	0x04, 3	; 4
	DDRB &= ~(1 << SPI_MISO);
 214:	24 98       	cbi	0x04, 4	; 4
	DDRB |= (1 << SPI_SCK);
 216:	25 9a       	sbi	0x04, 5	; 4

	SPCR |= (1 << SPE);
 218:	8c b5       	in	r24, 0x2c	; 44
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << MSTR);
 21e:	8c b5       	in	r24, 0x2c	; 44
 220:	80 61       	ori	r24, 0x10	; 16
 222:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << CPOL);
 224:	8c b5       	in	r24, 0x2c	; 44
 226:	88 60       	ori	r24, 0x08	; 8
 228:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << CPHA);
 22a:	8c b5       	in	r24, 0x2c	; 44
 22c:	84 60       	ori	r24, 0x04	; 4
 22e:	8c bd       	out	0x2c, r24	; 44
}
 230:	08 95       	ret

00000232 <spi_write>:

void spi_write(unsigned char data)
{
	PORTB &= ~(1 << SPI_SS);
 232:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;
 234:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));
 236:	0d b4       	in	r0, 0x2d	; 45
 238:	07 fe       	sbrs	r0, 7
 23a:	fd cf       	rjmp	.-6      	; 0x236 <spi_write+0x4>
	PORTB |= (1 << SPI_SS);
 23c:	2a 9a       	sbi	0x05, 2	; 5
}
 23e:	08 95       	ret

00000240 <three_char_clean_one>:
	three_char_print_one_char(1, 48 + ((num % 100) / 10), color);
	three_char_print_one_char(2, 48 + (num % 10), color);
}

void three_char_clean_one(unsigned char offset, uint16_t color)
{
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	eb 01       	movw	r28, r22
	unsigned char x = 11 * (offset + 1) + 26 * offset;
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	2b e0       	ldi	r18, 0x0B	; 11
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	82 9f       	mul	r24, r18
 254:	a0 01       	movw	r20, r0
 256:	83 9f       	mul	r24, r19
 258:	50 0d       	add	r21, r0
 25a:	92 9f       	mul	r25, r18
 25c:	50 0d       	add	r21, r0
 25e:	11 24       	eor	r1, r1
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	2a e1       	ldi	r18, 0x1A	; 26
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	bc 01       	movw	r22, r24
 268:	62 9f       	mul	r22, r18
 26a:	c0 01       	movw	r24, r0
 26c:	63 9f       	mul	r22, r19
 26e:	90 0d       	add	r25, r0
 270:	72 9f       	mul	r23, r18
 272:	90 0d       	add	r25, r0
 274:	11 24       	eor	r1, r1
 276:	04 2f       	mov	r16, r20
 278:	08 0f       	add	r16, r24
 27a:	1c e2       	ldi	r17, 0x2C	; 44
	for(int i = 0; i < 40; i++) {
		ada_fruit_go_to(x, 44 + i);
 27c:	80 2f       	mov	r24, r16
 27e:	61 2f       	mov	r22, r17
 280:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
		ada_fruit_draw_horizental_line(26, color);
 284:	8a e1       	ldi	r24, 0x1A	; 26
 286:	be 01       	movw	r22, r28
 288:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 28c:	1f 5f       	subi	r17, 0xFF	; 255
}

void three_char_clean_one(unsigned char offset, uint16_t color)
{
	unsigned char x = 11 * (offset + 1) + 26 * offset;
	for(int i = 0; i < 40; i++) {
 28e:	14 35       	cpi	r17, 0x54	; 84
 290:	a9 f7       	brne	.-22     	; 0x27c <three_char_clean_one+0x3c>
		ada_fruit_go_to(x, 44 + i);
		ada_fruit_draw_horizental_line(26, color);
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <three_char_clean_all>:

void three_char_clean_all(uint16_t color)
{
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	8c 01       	movw	r16, r24
	three_char_clean_one(0, color);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	b8 01       	movw	r22, r16
 2a6:	0e 94 20 01 	call	0x240	; 0x240 <three_char_clean_one>
	three_char_clean_one(1, color);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	b8 01       	movw	r22, r16
 2ae:	0e 94 20 01 	call	0x240	; 0x240 <three_char_clean_one>
	three_char_clean_one(2, color);
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	b8 01       	movw	r22, r16
 2b6:	0e 94 20 01 	call	0x240	; 0x240 <three_char_clean_one>
}
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <three_char_print_one_char>:
#include "three_char.h"

void three_char_print_one_char(unsigned char offset, unsigned char data, uint16_t color)
{
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
	unsigned char x;
	int i;

	x = 11 * (offset + 1) + 26 * offset;
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	2b e0       	ldi	r18, 0x0B	; 11
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 9f       	mul	r24, r18
 2d0:	a0 01       	movw	r20, r0
 2d2:	83 9f       	mul	r24, r19
 2d4:	50 0d       	add	r21, r0
 2d6:	92 9f       	mul	r25, r18
 2d8:	50 0d       	add	r21, r0
 2da:	11 24       	eor	r1, r1
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	2a e1       	ldi	r18, 0x1A	; 26
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	e2 9f       	mul	r30, r18
 2e6:	c0 01       	movw	r24, r0
 2e8:	e3 9f       	mul	r30, r19
 2ea:	90 0d       	add	r25, r0
 2ec:	f2 9f       	mul	r31, r18
 2ee:	90 0d       	add	r25, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	04 2f       	mov	r16, r20
 2f4:	08 0f       	add	r16, r24

	if(data == '0') {
 2f6:	60 33       	cpi	r22, 0x30	; 48
 2f8:	91 f5       	brne	.+100    	; 0x35e <three_char_print_one_char+0x9e>
 2fa:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
 2fc:	80 2f       	mov	r24, r16
 2fe:	61 2f       	mov	r22, r17
 300:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 304:	8a e1       	ldi	r24, 0x1A	; 26
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 30e:	1f 5f       	subi	r17, 0xFF	; 255
	int i;

	x = 11 * (offset + 1) + 26 * offset;

	if(data == '0') {
		for(i = 0; i < 8; i++) {
 310:	14 33       	cpi	r17, 0x34	; 52
 312:	a1 f7       	brne	.-24     	; 0x2fc <three_char_print_one_char+0x3c>
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 24; i++) {
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
 314:	e2 e1       	ldi	r30, 0x12	; 18
 316:	fe 2e       	mov	r15, r30
 318:	f0 0e       	add	r15, r16
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 24; i++) {
			ada_fruit_go_to(x, 52 + i);
 31a:	80 2f       	mov	r24, r16
 31c:	61 2f       	mov	r22, r17
 31e:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 322:	88 e0       	ldi	r24, 0x08	; 8
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
			ada_fruit_go_to(x + 18, 52 + i);
 32c:	8f 2d       	mov	r24, r15
 32e:	61 2f       	mov	r22, r17
 330:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 334:	88 e0       	ldi	r24, 0x08	; 8
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 33e:	1f 5f       	subi	r17, 0xFF	; 255
	if(data == '0') {
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 24; i++) {
 340:	1c 34       	cpi	r17, 0x4C	; 76
 342:	59 f7       	brne	.-42     	; 0x31a <three_char_print_one_char+0x5a>
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 344:	80 2f       	mov	r24, r16
 346:	61 2f       	mov	r22, r17
 348:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 34c:	8a e1       	ldi	r24, 0x1A	; 26
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 356:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 358:	14 35       	cpi	r17, 0x54	; 84
 35a:	a1 f7       	brne	.-24     	; 0x344 <three_char_print_one_char+0x84>
 35c:	34 c2       	rjmp	.+1128   	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '1') {
 35e:	61 33       	cpi	r22, 0x31	; 49
 360:	79 f4       	brne	.+30     	; 0x380 <three_char_print_one_char+0xc0>
 362:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 40; i++) {
			ada_fruit_go_to(x + 18, 44 + i);
 364:	0e 5e       	subi	r16, 0xEE	; 238
 366:	80 2f       	mov	r24, r16
 368:	61 2f       	mov	r22, r17
 36a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 378:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '1') {
		for(i = 0; i < 40; i++) {
 37a:	14 35       	cpi	r17, 0x54	; 84
 37c:	a1 f7       	brne	.-24     	; 0x366 <three_char_print_one_char+0xa6>
 37e:	23 c2       	rjmp	.+1094   	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x + 18, 44 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
	}

	else if(data == '2') {
 380:	62 33       	cpi	r22, 0x32	; 50
 382:	09 f0       	breq	.+2      	; 0x386 <three_char_print_one_char+0xc6>
 384:	41 c0       	rjmp	.+130    	; 0x408 <three_char_print_one_char+0x148>
 386:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
 388:	80 2f       	mov	r24, r16
 38a:	61 2f       	mov	r22, r17
 38c:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 390:	8a e1       	ldi	r24, 0x1A	; 26
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 39a:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(8, 0);
		}
	}

	else if(data == '2') {
		for(i = 0; i < 8; i++) {
 39c:	14 33       	cpi	r17, 0x34	; 52
 39e:	a1 f7       	brne	.-24     	; 0x388 <three_char_print_one_char+0xc8>
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 52 + i);
 3a0:	80 2f       	mov	r24, r16
 3a2:	61 2f       	mov	r22, r17
 3a4:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 3b2:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '2') {
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 3b4:	1c 33       	cpi	r17, 0x3C	; 60
 3b6:	a1 f7       	brne	.-24     	; 0x3a0 <three_char_print_one_char+0xe0>
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
 3b8:	80 2f       	mov	r24, r16
 3ba:	61 2f       	mov	r22, r17
 3bc:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 3c0:	8a e1       	ldi	r24, 0x1A	; 26
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 3ca:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 3cc:	14 34       	cpi	r17, 0x44	; 68
 3ce:	a1 f7       	brne	.-24     	; 0x3b8 <three_char_print_one_char+0xf8>
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 68 + i);
 3d0:	72 e1       	ldi	r23, 0x12	; 18
 3d2:	f7 2e       	mov	r15, r23
 3d4:	f0 0e       	add	r15, r16
 3d6:	8f 2d       	mov	r24, r15
 3d8:	61 2f       	mov	r22, r17
 3da:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 3de:	88 e0       	ldi	r24, 0x08	; 8
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 3e8:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 3ea:	1c 34       	cpi	r17, 0x4C	; 76
 3ec:	a1 f7       	brne	.-24     	; 0x3d6 <three_char_print_one_char+0x116>
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 3ee:	80 2f       	mov	r24, r16
 3f0:	61 2f       	mov	r22, r17
 3f2:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 3f6:	8a e1       	ldi	r24, 0x1A	; 26
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 400:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 402:	14 35       	cpi	r17, 0x54	; 84
 404:	a1 f7       	brne	.-24     	; 0x3ee <three_char_print_one_char+0x12e>
 406:	df c1       	rjmp	.+958    	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '3') {
 408:	63 33       	cpi	r22, 0x33	; 51
 40a:	09 f0       	breq	.+2      	; 0x40e <three_char_print_one_char+0x14e>
 40c:	41 c0       	rjmp	.+130    	; 0x490 <three_char_print_one_char+0x1d0>
 40e:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
 410:	80 2f       	mov	r24, r16
 412:	61 2f       	mov	r22, r17
 414:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 418:	8a e1       	ldi	r24, 0x1A	; 26
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 422:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '3') {
		for(i = 0; i < 8; i++) {
 424:	14 33       	cpi	r17, 0x34	; 52
 426:	a1 f7       	brne	.-24     	; 0x410 <three_char_print_one_char+0x150>
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 52 + i);
 428:	62 e1       	ldi	r22, 0x12	; 18
 42a:	f6 2e       	mov	r15, r22
 42c:	f0 0e       	add	r15, r16
 42e:	8f 2d       	mov	r24, r15
 430:	61 2f       	mov	r22, r17
 432:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 436:	88 e0       	ldi	r24, 0x08	; 8
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 440:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '3') {
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 442:	1c 33       	cpi	r17, 0x3C	; 60
 444:	a1 f7       	brne	.-24     	; 0x42e <three_char_print_one_char+0x16e>
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
 446:	80 2f       	mov	r24, r16
 448:	61 2f       	mov	r22, r17
 44a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 44e:	8a e1       	ldi	r24, 0x1A	; 26
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 458:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 45a:	14 34       	cpi	r17, 0x44	; 68
 45c:	a1 f7       	brne	.-24     	; 0x446 <three_char_print_one_char+0x186>
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 68 + i);
 45e:	8f 2d       	mov	r24, r15
 460:	61 2f       	mov	r22, r17
 462:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 466:	88 e0       	ldi	r24, 0x08	; 8
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 470:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 472:	1c 34       	cpi	r17, 0x4C	; 76
 474:	a1 f7       	brne	.-24     	; 0x45e <three_char_print_one_char+0x19e>
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 476:	80 2f       	mov	r24, r16
 478:	61 2f       	mov	r22, r17
 47a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 47e:	8a e1       	ldi	r24, 0x1A	; 26
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 488:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 48a:	14 35       	cpi	r17, 0x54	; 84
 48c:	a1 f7       	brne	.-24     	; 0x476 <three_char_print_one_char+0x1b6>
 48e:	9b c1       	rjmp	.+822    	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '4') {
 490:	64 33       	cpi	r22, 0x34	; 52
 492:	91 f5       	brne	.+100    	; 0x4f8 <three_char_print_one_char+0x238>
 494:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 16; i++) {
			ada_fruit_go_to(x + 18, 44 + i);
 496:	52 e1       	ldi	r21, 0x12	; 18
 498:	f5 2e       	mov	r15, r21
 49a:	f0 0e       	add	r15, r16
 49c:	8f 2d       	mov	r24, r15
 49e:	61 2f       	mov	r22, r17
 4a0:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 4a4:	88 e0       	ldi	r24, 0x08	; 8
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 4ae:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '4') {
		for(i = 0; i < 16; i++) {
 4b0:	1c 33       	cpi	r17, 0x3C	; 60
 4b2:	a1 f7       	brne	.-24     	; 0x49c <three_char_print_one_char+0x1dc>
			ada_fruit_go_to(x + 18, 44 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
 4b4:	80 2f       	mov	r24, r16
 4b6:	61 2f       	mov	r22, r17
 4b8:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 4bc:	8a e1       	ldi	r24, 0x1A	; 26
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 4c6:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '4') {
		for(i = 0; i < 16; i++) {
			ada_fruit_go_to(x + 18, 44 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 4c8:	14 34       	cpi	r17, 0x44	; 68
 4ca:	a1 f7       	brne	.-24     	; 0x4b4 <three_char_print_one_char+0x1f4>
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 16; i++) {
			ada_fruit_go_to(x, 68 + i);
 4cc:	80 2f       	mov	r24, r16
 4ce:	61 2f       	mov	r22, r17
 4d0:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 4d4:	88 e0       	ldi	r24, 0x08	; 8
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
			ada_fruit_go_to(x + 18, 68 + i);
 4de:	8f 2d       	mov	r24, r15
 4e0:	61 2f       	mov	r22, r17
 4e2:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 4f0:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 16; i++) {
 4f2:	14 35       	cpi	r17, 0x54	; 84
 4f4:	59 f7       	brne	.-42     	; 0x4cc <three_char_print_one_char+0x20c>
 4f6:	67 c1       	rjmp	.+718    	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
	}

	else if(data == '5') {
 4f8:	65 33       	cpi	r22, 0x35	; 53
 4fa:	09 f0       	breq	.+2      	; 0x4fe <three_char_print_one_char+0x23e>
 4fc:	41 c0       	rjmp	.+130    	; 0x580 <three_char_print_one_char+0x2c0>
 4fe:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
 500:	80 2f       	mov	r24, r16
 502:	61 2f       	mov	r22, r17
 504:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 508:	8a e1       	ldi	r24, 0x1A	; 26
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 512:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(8, 0);
		}
	}

	else if(data == '5') {
		for(i = 0; i < 8; i++) {
 514:	14 33       	cpi	r17, 0x34	; 52
 516:	a1 f7       	brne	.-24     	; 0x500 <three_char_print_one_char+0x240>
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 52 + i);
 518:	42 e1       	ldi	r20, 0x12	; 18
 51a:	f4 2e       	mov	r15, r20
 51c:	f0 0e       	add	r15, r16
 51e:	8f 2d       	mov	r24, r15
 520:	61 2f       	mov	r22, r17
 522:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 526:	88 e0       	ldi	r24, 0x08	; 8
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 530:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '5') {
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 532:	1c 33       	cpi	r17, 0x3C	; 60
 534:	a1 f7       	brne	.-24     	; 0x51e <three_char_print_one_char+0x25e>
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
 536:	80 2f       	mov	r24, r16
 538:	61 2f       	mov	r22, r17
 53a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 53e:	8a e1       	ldi	r24, 0x1A	; 26
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 548:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 54a:	14 34       	cpi	r17, 0x44	; 68
 54c:	a1 f7       	brne	.-24     	; 0x536 <three_char_print_one_char+0x276>
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 68 + i);
 54e:	80 2f       	mov	r24, r16
 550:	61 2f       	mov	r22, r17
 552:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 560:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 562:	1c 34       	cpi	r17, 0x4C	; 76
 564:	a1 f7       	brne	.-24     	; 0x54e <three_char_print_one_char+0x28e>
			ada_fruit_go_to(x, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 566:	80 2f       	mov	r24, r16
 568:	61 2f       	mov	r22, r17
 56a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 56e:	8a e1       	ldi	r24, 0x1A	; 26
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 578:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 57a:	14 35       	cpi	r17, 0x54	; 84
 57c:	a1 f7       	brne	.-24     	; 0x566 <three_char_print_one_char+0x2a6>
 57e:	23 c1       	rjmp	.+582    	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '6') {
 580:	66 33       	cpi	r22, 0x36	; 54
 582:	09 f0       	breq	.+2      	; 0x586 <three_char_print_one_char+0x2c6>
 584:	4a c0       	rjmp	.+148    	; 0x61a <three_char_print_one_char+0x35a>
 586:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
 588:	80 2f       	mov	r24, r16
 58a:	61 2f       	mov	r22, r17
 58c:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 590:	8a e1       	ldi	r24, 0x1A	; 26
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 59a:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '6') {
		for(i = 0; i < 8; i++) {
 59c:	14 33       	cpi	r17, 0x34	; 52
 59e:	a1 f7       	brne	.-24     	; 0x588 <three_char_print_one_char+0x2c8>
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
 5a0:	32 e1       	ldi	r19, 0x12	; 18
 5a2:	f3 2e       	mov	r15, r19
 5a4:	f0 0e       	add	r15, r16
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 52 + i);
 5a6:	80 2f       	mov	r24, r16
 5a8:	61 2f       	mov	r22, r17
 5aa:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 5ae:	88 e0       	ldi	r24, 0x08	; 8
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
			ada_fruit_go_to(x + 18, 52 + i);
 5b8:	8f 2d       	mov	r24, r15
 5ba:	61 2f       	mov	r22, r17
 5bc:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 5c0:	88 e0       	ldi	r24, 0x08	; 8
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 5ca:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '6') {
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 5cc:	1c 33       	cpi	r17, 0x3C	; 60
 5ce:	59 f7       	brne	.-42     	; 0x5a6 <three_char_print_one_char+0x2e6>
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
 5d0:	80 2f       	mov	r24, r16
 5d2:	61 2f       	mov	r22, r17
 5d4:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 5d8:	8a e1       	ldi	r24, 0x1A	; 26
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 5e2:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 5e4:	14 34       	cpi	r17, 0x44	; 68
 5e6:	a1 f7       	brne	.-24     	; 0x5d0 <three_char_print_one_char+0x310>
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 68 + i);
 5e8:	80 2f       	mov	r24, r16
 5ea:	61 2f       	mov	r22, r17
 5ec:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 5fa:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 5fc:	1c 34       	cpi	r17, 0x4C	; 76
 5fe:	a1 f7       	brne	.-24     	; 0x5e8 <three_char_print_one_char+0x328>
			ada_fruit_go_to(x, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 600:	80 2f       	mov	r24, r16
 602:	61 2f       	mov	r22, r17
 604:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 608:	8a e1       	ldi	r24, 0x1A	; 26
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 612:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 614:	14 35       	cpi	r17, 0x54	; 84
 616:	a1 f7       	brne	.-24     	; 0x600 <three_char_print_one_char+0x340>
 618:	d6 c0       	rjmp	.+428    	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '7') {
 61a:	67 33       	cpi	r22, 0x37	; 55
 61c:	91 f5       	brne	.+100    	; 0x682 <three_char_print_one_char+0x3c2>
 61e:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 16; i++) {
			ada_fruit_go_to(x + 18, 44 + i);
 620:	22 e1       	ldi	r18, 0x12	; 18
 622:	f2 2e       	mov	r15, r18
 624:	f0 0e       	add	r15, r16
 626:	8f 2d       	mov	r24, r15
 628:	61 2f       	mov	r22, r17
 62a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 62e:	88 e0       	ldi	r24, 0x08	; 8
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 638:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '7') {
		for(i = 0; i < 16; i++) {
 63a:	1c 33       	cpi	r17, 0x3C	; 60
 63c:	a1 f7       	brne	.-24     	; 0x626 <three_char_print_one_char+0x366>
			ada_fruit_go_to(x + 18, 44 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 16; i++) {
			ada_fruit_go_to(x, 60 + i);
 63e:	80 2f       	mov	r24, r16
 640:	61 2f       	mov	r22, r17
 642:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 646:	88 e0       	ldi	r24, 0x08	; 8
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
			ada_fruit_go_to(x + 18, 60 + i);
 650:	8f 2d       	mov	r24, r15
 652:	61 2f       	mov	r22, r17
 654:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 658:	88 e0       	ldi	r24, 0x08	; 8
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 662:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '7') {
		for(i = 0; i < 16; i++) {
			ada_fruit_go_to(x + 18, 44 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 16; i++) {
 664:	1c 34       	cpi	r17, 0x4C	; 76
 666:	59 f7       	brne	.-42     	; 0x63e <three_char_print_one_char+0x37e>
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 60 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 668:	80 2f       	mov	r24, r16
 66a:	61 2f       	mov	r22, r17
 66c:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 670:	8a e1       	ldi	r24, 0x1A	; 26
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 67a:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 60 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 67c:	14 35       	cpi	r17, 0x54	; 84
 67e:	a1 f7       	brne	.-24     	; 0x668 <three_char_print_one_char+0x3a8>
 680:	a2 c0       	rjmp	.+324    	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '8') {
 682:	68 33       	cpi	r22, 0x38	; 56
 684:	09 f0       	breq	.+2      	; 0x688 <three_char_print_one_char+0x3c8>
 686:	53 c0       	rjmp	.+166    	; 0x72e <three_char_print_one_char+0x46e>
 688:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
 68a:	80 2f       	mov	r24, r16
 68c:	61 2f       	mov	r22, r17
 68e:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 692:	8a e1       	ldi	r24, 0x1A	; 26
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 69c:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '8') {
		for(i = 0; i < 8; i++) {
 69e:	14 33       	cpi	r17, 0x34	; 52
 6a0:	a1 f7       	brne	.-24     	; 0x68a <three_char_print_one_char+0x3ca>
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
 6a2:	92 e1       	ldi	r25, 0x12	; 18
 6a4:	f9 2e       	mov	r15, r25
 6a6:	f0 0e       	add	r15, r16
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 52 + i);
 6a8:	80 2f       	mov	r24, r16
 6aa:	61 2f       	mov	r22, r17
 6ac:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 6b0:	88 e0       	ldi	r24, 0x08	; 8
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
			ada_fruit_go_to(x + 18, 52 + i);
 6ba:	8f 2d       	mov	r24, r15
 6bc:	61 2f       	mov	r22, r17
 6be:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 6c2:	88 e0       	ldi	r24, 0x08	; 8
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 6cc:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '8') {
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 6ce:	1c 33       	cpi	r17, 0x3C	; 60
 6d0:	59 f7       	brne	.-42     	; 0x6a8 <three_char_print_one_char+0x3e8>
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
 6d2:	80 2f       	mov	r24, r16
 6d4:	61 2f       	mov	r22, r17
 6d6:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 6da:	8a e1       	ldi	r24, 0x1A	; 26
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 6e4:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_go_to(x, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 6e6:	14 34       	cpi	r17, 0x44	; 68
 6e8:	a1 f7       	brne	.-24     	; 0x6d2 <three_char_print_one_char+0x412>
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 68 + i);
 6ea:	80 2f       	mov	r24, r16
 6ec:	61 2f       	mov	r22, r17
 6ee:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 6f2:	88 e0       	ldi	r24, 0x08	; 8
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
			ada_fruit_go_to(x + 18, 68 + i);
 6fc:	8f 2d       	mov	r24, r15
 6fe:	61 2f       	mov	r22, r17
 700:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 704:	88 e0       	ldi	r24, 0x08	; 8
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 70e:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 710:	1c 34       	cpi	r17, 0x4C	; 76
 712:	59 f7       	brne	.-42     	; 0x6ea <three_char_print_one_char+0x42a>
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 714:	80 2f       	mov	r24, r16
 716:	61 2f       	mov	r22, r17
 718:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 71c:	8a e1       	ldi	r24, 0x1A	; 26
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 726:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_go_to(x, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 728:	14 35       	cpi	r17, 0x54	; 84
 72a:	a1 f7       	brne	.-24     	; 0x714 <three_char_print_one_char+0x454>
 72c:	4c c0       	rjmp	.+152    	; 0x7c6 <three_char_print_one_char+0x506>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '9') {
 72e:	69 33       	cpi	r22, 0x39	; 57
 730:	09 f0       	breq	.+2      	; 0x734 <three_char_print_one_char+0x474>
 732:	49 c0       	rjmp	.+146    	; 0x7c6 <three_char_print_one_char+0x506>
 734:	1c e2       	ldi	r17, 0x2C	; 44
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
 736:	80 2f       	mov	r24, r16
 738:	61 2f       	mov	r22, r17
 73a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 73e:	8a e1       	ldi	r24, 0x1A	; 26
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 748:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_draw_horizental_line(26, 0);
		}
	}

	else if(data == '9') {
		for(i = 0; i < 8; i++) {
 74a:	14 33       	cpi	r17, 0x34	; 52
 74c:	a1 f7       	brne	.-24     	; 0x736 <three_char_print_one_char+0x476>
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 52 + i);
 74e:	82 e1       	ldi	r24, 0x12	; 18
 750:	f8 2e       	mov	r15, r24
 752:	f0 0e       	add	r15, r16
 754:	8f 2d       	mov	r24, r15
 756:	61 2f       	mov	r22, r17
 758:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 75c:	88 e0       	ldi	r24, 0x08	; 8
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 766:	1f 5f       	subi	r17, 0xFF	; 255
	else if(data == '9') {
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 44 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 768:	1c 33       	cpi	r17, 0x3C	; 60
 76a:	a1 f7       	brne	.-24     	; 0x754 <three_char_print_one_char+0x494>
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
 76c:	80 2f       	mov	r24, r16
 76e:	61 2f       	mov	r22, r17
 770:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 774:	8a e1       	ldi	r24, 0x1A	; 26
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 77e:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x + 18, 52 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 780:	14 34       	cpi	r17, 0x44	; 68
 782:	a1 f7       	brne	.-24     	; 0x76c <three_char_print_one_char+0x4ac>
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 68 + i);
 784:	80 2f       	mov	r24, r16
 786:	61 2f       	mov	r22, r17
 788:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 78c:	88 e0       	ldi	r24, 0x08	; 8
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
			ada_fruit_go_to(x + 18, 68 + i);
 796:	8f 2d       	mov	r24, r15
 798:	61 2f       	mov	r22, r17
 79a:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(8, 0);
 79e:	88 e0       	ldi	r24, 0x08	; 8
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 7a8:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 60 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
		for(i = 0; i < 8; i++) {
 7aa:	1c 34       	cpi	r17, 0x4C	; 76
 7ac:	59 f7       	brne	.-42     	; 0x784 <three_char_print_one_char+0x4c4>
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
			ada_fruit_go_to(x, 76 + i);
 7ae:	80 2f       	mov	r24, r16
 7b0:	61 2f       	mov	r22, r17
 7b2:	0e 94 c8 00 	call	0x190	; 0x190 <ada_fruit_go_to>
			ada_fruit_draw_horizental_line(26, 0);
 7b6:	8a e1       	ldi	r24, 0x1A	; 26
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	0e 94 a7 00 	call	0x14e	; 0x14e <ada_fruit_draw_horizental_line>
 7c0:	1f 5f       	subi	r17, 0xFF	; 255
			ada_fruit_go_to(x, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
			ada_fruit_go_to(x + 18, 68 + i);
			ada_fruit_draw_horizental_line(8, 0);
		}
		for(i = 0; i < 8; i++) {
 7c2:	14 35       	cpi	r17, 0x54	; 84
 7c4:	a1 f7       	brne	.-24     	; 0x7ae <three_char_print_one_char+0x4ee>
			ada_fruit_go_to(x, 76 + i);
			ada_fruit_draw_horizental_line(26, 0);
		}
	}
}
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	ff 90       	pop	r15
 7cc:	08 95       	ret

000007ce <three_char_print_dec3>:

void three_char_print_dec3(unsigned int num, uint16_t color)
{
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	ec 01       	movw	r28, r24
 7d8:	8b 01       	movw	r16, r22
	if(num >= 1000) {
 7da:	83 e0       	ldi	r24, 0x03	; 3
 7dc:	c8 3e       	cpi	r28, 0xE8	; 232
 7de:	d8 07       	cpc	r29, r24
 7e0:	18 f5       	brcc	.+70     	; 0x828 <three_char_print_dec3+0x5a>
		return ;
	}
	three_char_print_one_char(0, 48 + (num / 100), color);
 7e2:	ce 01       	movw	r24, r28
 7e4:	64 e6       	ldi	r22, 0x64	; 100
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	0e 94 8a 04 	call	0x914	; 0x914 <__udivmodhi4>
 7ec:	60 5d       	subi	r22, 0xD0	; 208
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	a8 01       	movw	r20, r16
 7f2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <three_char_print_one_char>
	three_char_print_one_char(1, 48 + ((num % 100) / 10), color);
 7f6:	ce 01       	movw	r24, r28
 7f8:	64 e6       	ldi	r22, 0x64	; 100
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	0e 94 8a 04 	call	0x914	; 0x914 <__udivmodhi4>
 800:	6a e0       	ldi	r22, 0x0A	; 10
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	0e 94 8a 04 	call	0x914	; 0x914 <__udivmodhi4>
 808:	60 5d       	subi	r22, 0xD0	; 208
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	a8 01       	movw	r20, r16
 80e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <three_char_print_one_char>
	three_char_print_one_char(2, 48 + (num % 10), color);
 812:	ce 01       	movw	r24, r28
 814:	6a e0       	ldi	r22, 0x0A	; 10
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	0e 94 8a 04 	call	0x914	; 0x914 <__udivmodhi4>
 81c:	68 2f       	mov	r22, r24
 81e:	60 5d       	subi	r22, 0xD0	; 208
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	a8 01       	movw	r20, r16
 824:	0e 94 60 01 	call	0x2c0	; 0x2c0 <three_char_print_one_char>
}
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	08 95       	ret

00000832 <uart_init>:

#include "my_uart.h"

void uart_init()
{
	UBRR0H = 0;
 832:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 103;
 836:	87 e6       	ldi	r24, 0x67	; 103
 838:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0C |= 0x06;
 83c:	e2 ec       	ldi	r30, 0xC2	; 194
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	86 60       	ori	r24, 0x06	; 6
 844:	80 83       	st	Z, r24

	UCSR0B |= _BV(RXEN0);
 846:	e1 ec       	ldi	r30, 0xC1	; 193
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	80 61       	ori	r24, 0x10	; 16
 84e:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 850:	80 81       	ld	r24, Z
 852:	88 60       	ori	r24, 0x08	; 8
 854:	80 83       	st	Z, r24
}
 856:	08 95       	ret

00000858 <uart_write>:

void uart_write(unsigned char data)
{
 858:	98 2f       	mov	r25, r24
	while(!(UCSR0A & (1 << UDRE0)));
 85a:	80 91 c0 00 	lds	r24, 0x00C0
 85e:	85 ff       	sbrs	r24, 5
 860:	fc cf       	rjmp	.-8      	; 0x85a <uart_write+0x2>
	UDR0 = data;
 862:	90 93 c6 00 	sts	0x00C6, r25
}
 866:	08 95       	ret

00000868 <uart_read>:

unsigned char uart_read()
{
	while(!(UCSR0A & (1 << RXC0)));
 868:	80 91 c0 00 	lds	r24, 0x00C0
 86c:	87 ff       	sbrs	r24, 7
 86e:	fc cf       	rjmp	.-8      	; 0x868 <uart_read>
	return UDR0;
 870:	80 91 c6 00 	lds	r24, 0x00C6
}
 874:	08 95       	ret

00000876 <pm2005_get_result>:

unsigned char pm2005_get_result_cmd[5] = {0x11, 0x2, 0xb, 0x1, 0xe1};
unsigned char pm2005_result[20];

unsigned long pm2005_get_result()
{
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
	int i;
	for(i = 0; i < 5; i++) {
		uart_write(pm2005_get_result_cmd[i]);
 87a:	80 91 00 01 	lds	r24, 0x0100
 87e:	0e 94 2c 04 	call	0x858	; 0x858 <uart_write>
 882:	80 91 01 01 	lds	r24, 0x0101
 886:	0e 94 2c 04 	call	0x858	; 0x858 <uart_write>
 88a:	80 91 02 01 	lds	r24, 0x0102
 88e:	0e 94 2c 04 	call	0x858	; 0x858 <uart_write>
 892:	80 91 03 01 	lds	r24, 0x0103
 896:	0e 94 2c 04 	call	0x858	; 0x858 <uart_write>
 89a:	80 91 04 01 	lds	r24, 0x0104
 89e:	0e 94 2c 04 	call	0x858	; 0x858 <uart_write>
 8a2:	c6 e0       	ldi	r28, 0x06	; 6
 8a4:	d1 e0       	ldi	r29, 0x01	; 1
	}
	for(i = 0; i < 20; i++) {
		pm2005_result[i] = uart_read();
 8a6:	0e 94 34 04 	call	0x868	; 0x868 <uart_read>
 8aa:	89 93       	st	Y+, r24
{
	int i;
	for(i = 0; i < 5; i++) {
		uart_write(pm2005_get_result_cmd[i]);
	}
	for(i = 0; i < 20; i++) {
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	ca 31       	cpi	r28, 0x1A	; 26
 8b0:	d8 07       	cpc	r29, r24
 8b2:	c9 f7       	brne	.-14     	; 0x8a6 <pm2005_get_result+0x30>
 8b4:	20 91 09 01 	lds	r18, 0x0109
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	40 e0       	ldi	r20, 0x00	; 0
 8bc:	50 e0       	ldi	r21, 0x00	; 0
 8be:	52 2f       	mov	r21, r18
 8c0:	44 27       	eor	r20, r20
 8c2:	33 27       	eor	r19, r19
 8c4:	22 27       	eor	r18, r18
 8c6:	80 91 0a 01 	lds	r24, 0x010A
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	a0 e0       	ldi	r26, 0x00	; 0
 8ce:	b0 e0       	ldi	r27, 0x00	; 0
 8d0:	dc 01       	movw	r26, r24
 8d2:	99 27       	eor	r25, r25
 8d4:	88 27       	eor	r24, r24
 8d6:	28 2b       	or	r18, r24
 8d8:	39 2b       	or	r19, r25
 8da:	4a 2b       	or	r20, r26
 8dc:	5b 2b       	or	r21, r27
 8de:	80 91 0c 01 	lds	r24, 0x010C
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	a0 e0       	ldi	r26, 0x00	; 0
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	28 2b       	or	r18, r24
 8ea:	39 2b       	or	r19, r25
 8ec:	4a 2b       	or	r20, r26
 8ee:	5b 2b       	or	r21, r27
 8f0:	80 91 0b 01 	lds	r24, 0x010B
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	a0 e0       	ldi	r26, 0x00	; 0
 8f8:	b0 e0       	ldi	r27, 0x00	; 0
 8fa:	ba 2f       	mov	r27, r26
 8fc:	a9 2f       	mov	r26, r25
 8fe:	98 2f       	mov	r25, r24
 900:	88 27       	eor	r24, r24
 902:	28 2b       	or	r18, r24
 904:	39 2b       	or	r19, r25
 906:	4a 2b       	or	r20, r26
 908:	5b 2b       	or	r21, r27
		pm2005_result[i] = uart_read();
	}
	return (((unsigned long)pm2005_result[3] << 24) | ((unsigned long)pm2005_result[4] << 16) | ((unsigned long)pm2005_result[5] << 8) | (unsigned long)pm2005_result[6]);
}
 90a:	b9 01       	movw	r22, r18
 90c:	ca 01       	movw	r24, r20
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <__udivmodhi4>:
 914:	aa 1b       	sub	r26, r26
 916:	bb 1b       	sub	r27, r27
 918:	51 e1       	ldi	r21, 0x11	; 17
 91a:	07 c0       	rjmp	.+14     	; 0x92a <__udivmodhi4_ep>

0000091c <__udivmodhi4_loop>:
 91c:	aa 1f       	adc	r26, r26
 91e:	bb 1f       	adc	r27, r27
 920:	a6 17       	cp	r26, r22
 922:	b7 07       	cpc	r27, r23
 924:	10 f0       	brcs	.+4      	; 0x92a <__udivmodhi4_ep>
 926:	a6 1b       	sub	r26, r22
 928:	b7 0b       	sbc	r27, r23

0000092a <__udivmodhi4_ep>:
 92a:	88 1f       	adc	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	5a 95       	dec	r21
 930:	a9 f7       	brne	.-22     	; 0x91c <__udivmodhi4_loop>
 932:	80 95       	com	r24
 934:	90 95       	com	r25
 936:	bc 01       	movw	r22, r24
 938:	cd 01       	movw	r24, r26
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
